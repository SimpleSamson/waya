import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:waya/AC.dart';
import 'package:waya/DCLaws.dart';
import 'package:waya/diode.dart';
import 'package:waya/transistor.dart';
import 'package:webview_flutter/webview_flutter.dart';

Widget? widx;
String? ErrorMsg;
const String wayaBaseUrl = "https://waya.miradi.info/";
class ColorBand { //TODO add this so that color band can simply derive values
  int? Digit;
  double? multiplier;
  double? tolerance;
  ColorBand(int? Digit, double? multiplier, double? tolerance){
    this.Digit = Digit; // = Digit;
    this.multiplier = multiplier;
    this.tolerance = tolerance;
  }
}

void main() {
  runApp(WayaApp());
}

class WayaApp extends StatelessWidget {
  const WayaApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Electric Engineer Calculator',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
//      home: const WayaHomePage(title: 'Waya Home Page'),
//        home: const VoltageDivider(),
//      home: const DiscPage(),
//    home: const ReadPage(),
//    home: const CalculatorPage(),
//    home: VoltageDivider(),
    home: WayaHomePage(title: 'Waya',),
    );
  }
}

class ChoicePage extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ChoiceState();
}

class _ChoiceState extends State<ChoicePage> {

  @override
  Widget build(BuildContext context)  {
    return Scaffold(
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: <Widget>[
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Column(
                children: [
                  Image.asset('images/2.png',width: 49, height:49),
//                  Icon(Icons.add_a_photo_outlined, size: 49,),
                  Text("Transistor"),
                  TextButton.icon(onPressed: () {
//                  _bodyofApp(1);
                    Navigator.push(context, MaterialPageRoute(
                        builder: (context) => const Transistor()));
//                  _calculatorPages.elementAt(1);
                  }, icon: Icon(Icons.forward), label: const Text(""),),
                ],
              ),
              Column(
                children: [
                  Image.asset('images/3.png', width: 49, height: 49,),
//                  Icon(Icons.add_a_photo_outlined, size: 49,),
                  Text("Resistor"),
                  TextButton.icon(onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (context) => ResistorCalc()));
                  },
                      icon: Icon(Icons.calculate),
                      label: const Text("CALCULATE")),
                ],
              ),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Column(
                children: [
                  Icon(Icons.add_a_photo_outlined, size: 49,),
                  Text("Diode"),
                  TextButton.icon(onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (context) => diode()));
                  },
                      icon: Icon(Icons.calculate),
                      label: const Text("CALCULATE")),
                ],
              ),
              Column(
                children: [
                  Icon(Icons.add_a_photo_outlined, size: 49,),
                  Text("Ohms Law"),
                  TextButton.icon(onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (context) => OhmsLaw()));
                  },
                      icon: Icon(Icons.calculate_outlined),
                      label: const Text("")),
                ],
              ),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Column(
                children: [
                  Icon(Icons.add_a_photo_outlined, size: 49,),
                  Text("AC"),
                  TextButton.icon(onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (context) => AC()));
                  },
                      icon: Icon(Icons.calculate_rounded),
                      label: const Text("CALCULATE")),
                ],
              ),
              Column(
                children: [
                  Icon(Icons.add_a_photo_outlined, size: 49,),
                  Text("OHM'S LAW"),
                  TextButton.icon(onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (context) => OhmsLaw()));
                  },
                      icon: Icon(Icons.calculate_sharp),
                      label: const Text("CALCULATE")),
                ],
              ),
            ],
          ),
        ],
      ),
    );
  }
}
class WayaHomePage extends StatefulWidget {
  const WayaHomePage({Key? key, required this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<WayaHomePage> createState() => _WayaHomePageState();
}
class _WayaHomePageState extends State<WayaHomePage> {
  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: wayaTitle(),
      ),
      body: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
//          remove these
          children: <Widget>[
            MaterialApp(
              title: 'Resistor Value Calculator',
              theme:  ThemeData.dark(),
//              home: const CalculatorPage(title: 'Resistor Calculator'),
              home: ChoicePage(),
              routes: <String, WidgetBuilder>{
                '/calculators' : (BuildContext context) => ChoicePage(),
                '/discussion': (BuildContext context) => const DiscPage(title: 'discussion page'),
                '/read': (BuildContext context) => const ReadPage(title: 'Study'),
                '/readonline': (BuildContext context) => OnlineReadPage(),
                '/readoffline' : (BuildContext context) => OfflineReadPage(),
              },
            )
          ],
        ),
/*
      floatingActionButton: FloatingActionButton(
        onPressed: (){_exitApp()},
        tooltip: 'exit',
        child: const Icon(Icons.add),

      ), // This trailing comma makes auto-formatting nicer for build methods.
*/
    );
  }
}

class wayaTitle extends StatefulWidget{
  @override
  State<StatefulWidget> createState() => _wayaTitleState();
  }

class _wayaTitleState extends State<wayaTitle>{
  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        IconButton(onPressed: (){ Navigator.pushNamed(context, '/choices');}, icon: Icon(Icons.home)),
        IconButton(onPressed: (){Navigator.pushNamed(context, '/read');}, icon: Icon(Icons.library_books_outlined))
      ],
    );
  }

}

class DiscPage extends WebView{
  const DiscPage({Key? key, this.title}) : super(key: key);

  final String? title;
  Widget build(BuildContext context){
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: wayaTitle(),
      ),
      body: WebView(
        initialUrl: wayaBaseUrl + "discussion",
        javascriptMode: JavascriptMode.unrestricted,
      )
    );
  }
}
class ReadPage extends StatefulWidget {
  const ReadPage({Key? key, this.title}) : super(key: key);
  final String? title;

  @override
  State<ReadPage> createState() => _ReadPageState();

}

class _ReadPageState extends State<ReadPage>{
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: wayaTitle(),
      ),
      body: Column(
        children: [
          Text("How Would You like to Read"),
          ButtonBar(
          buttonHeight: 27,
          children: <ElevatedButton>[
            ElevatedButton(
              onPressed: (){
                Navigator.pushNamed(context, '/readonline');
              },
              child: const Text('Read Online'),
            ),
            ElevatedButton(
              onPressed: (){
                Navigator.pushNamed(context, '/offlineread');
              },
              child: const Text('Read Offline'),
            )
          ],
        ),
        ]
      ),
    );
  }
}
class OnlineReadPage extends StatefulWidget{
  @override
  State<StatefulWidget> createState() => _OnlineReadPageState();
}
class _OnlineReadPageState extends State<ReadPage>{

  Widget build(BuildContext context){
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: wayaTitle(),
      ),
    body :WebView(
      initialUrl: wayaBaseUrl + "reading",
      javascriptMode: JavascriptMode.unrestricted,
    )
    );
  }
}
class OfflineReadPage extends StatefulWidget{
  @override
  State<StatefulWidget> createState() => _OfflineReadPageState();
}

class _OfflineReadPageState extends State<OfflineReadPage>{
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          // Here we take the value from the MyHomePage object that was created by
          // the App.build method, and use it to set our appbar title.
          title: wayaTitle(),
        ),
        body : Text('show files'), //allow saving of file locations
    );
  }

}

class CalculatorPage extends StatelessWidget{
  // TODO: implement createState
  const CalculatorPage({Key? key, this.title}) : super(key: key);
  //this widget allows values or resistor to be entered
  // throw UnimplementedError();
  final String? title;
  @override
  Widget build(BuildContext context){
    return DefaultTextStyle(
      style: Theme.of(context).textTheme.headline4!,
      child: Container(
        color: Colors.white70,
        alignment: Alignment.center,
        child: const GroupedCalculators(),
      ),
    );
  }
}
//create a nav bar
class GroupedCalculators extends StatelessWidget{
  const GroupedCalculators({Key? key}) : super(key: key);
  @override
  Widget ResistorInfo(BuildContext context){
    return const TextField(
      enabled: true,
//        autofillHints: 'value in ohms',
    );
  }
  Widget build(BuildContext context){
    final PageController controller = PageController(initialPage: 0);
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
//      scrollDirection: Axis.horizontal,
//      controller: controller,

      children: <Widget>[
      Center(
        //TODO: make huge
        child: ElevatedButton(
            onPressed: (){
              VoltageDivider();
            },
            child: Text('Voltage Divider Calculator'),
      ),
    ),
      Center(
        child: ElevatedButton(
            onPressed: (){
              ResistorCalc();
            }, child: const Text('Resistor Value Calculator')),
      ),
    ],
    );
  }
}

//class VoltageDivider extends StatelessWidget{
class VoltageDivider extends StatefulWidget{
  const VoltageDivider({Key? key}):super(key:key);
  // const VoltageDivider({Key? key, this.Resistor1, this.Resistor2}) : super(key: key);
  // final FormField? Resistor1;
  // final FormField? Resistor2;

  @override
  State<StatefulWidget> createState() => _VoltageDivider();
}

class _VoltageDivider extends State<VoltageDivider>{
  var OutPutVoltage = 12.0;
  final GlobalKey<FormState> _resistorFormKey = GlobalKey<FormState>();
  final Future<String> resistorValue = Future<String>.delayed(
    const Duration(seconds: 3),
      () => 'value is 35',
  );

  bool visible = false;

  final resistor1Controller = TextEditingController();
  final resistor2Controller = TextEditingController();
  final VoltageOutController = TextEditingController();
  final VoltageInController = TextEditingController();
  final OutPutVoltageController = TextEditingController();

//  var resistor1;
  Future voltdiv() async {

    setState(() {
      visible = true;
    });

    double resistor1Value = resistor1Controller.text as double;
    double resistor2Value = resistor2Controller.text as double;
    double VoltageOutValue = VoltageOutController.text as double;
    double VoltageInValue = VoltageInController.text as double;

//    double calculateValue() {
//      late double x = 0;
      //output voltage
      if(OutPutVoltage.toString().isEmpty || resistor1Value.toString().isEmpty) {
        setState(() {
          visible = false;
        });
        OutPutVoltage = (VoltageInValue * resistor2Value) / (resistor1Value + resistor2Value);
//        OutPutVoltage;

      }
//      return x;
//    }

  }
  Widget build(BuildContext context){
    return Scaffold(

    body:
    Padding(padding: const EdgeInsets.symmetric(vertical:17, horizontal:17),
        child:
      Form(
      key: _resistorFormKey,
      child: Column(
        //icon then 2 resistors
        children: <Widget>[
          Center(
            child: Icon(
             Icons.battery_full, //change to voltage divider
             size: 70,
            ),
          ),
          Padding(padding: const EdgeInsets.symmetric(vertical:17, horizontal:17)),
          TextFormField(
            keyboardType: TextInputType.number,
            controller: resistor1Controller,
            decoration: const InputDecoration(
              hintText: 'Resistor1',
              labelText: 'Resistor 1',
            ),
/*            validator: (value){
              if(value!.isNotEmpty){
                resistor1Value = value as double;
              }
              return null;
            },*/
          ), //Resistor 1
          TextFormField(
            keyboardType: TextInputType.number,
            controller: resistor2Controller,
            decoration: const InputDecoration(
              hintText: 'Resistor2',
              labelText: 'Resistor 2',
            ),
/*            validator: (value){
              if(value!.isNotEmpty){
                resistor2Value = value as double;
              }
              return null;
            }*/
          ),
          TextFormField(
            keyboardType: TextInputType.number,
            controller:VoltageInController,
              decoration: InputDecoration(
                hintText: 'VoltageIn',
                labelText: 'Voltage In',
              ),
/*
              validator: (value){
                if(value == null||value.isEmpty){

                }
                if(value!.isNotEmpty){
                  VoltageInValue = value as double;
                }
                return null;
              }
*/
          ),
          TextFormField(
            keyboardType: TextInputType.number,
            controller : VoltageOutController,
              decoration: const InputDecoration(
                hintText: 'VoltageOut',
                labelText: 'Voltage Out',
              ),
/*
              validator: (value){
                if(value!.isNotEmpty){
                  VoltageOutValue = value as double;
                }
                return null;
              }
*/
          ),
          ElevatedButton(
              onPressed: (){
                //return true if valid false otherwise
//                if(_resistorFormKey.currentState!.validate()){
//                  calculateValue();
                    voltdiv();
                    showDialog(context: context, builder: (BuildContext context){
                      return AlertDialog(
                        title: new Text(OutPutVoltage.toString()),
                        actions: <Widget>[
                          ElevatedButton(onPressed: (){ Navigator.of(context).pop(); }, child: new Text('OK')),
                        ],
                      );
                    });
//                }
              },
              child: const Text('Calculate')
          ),
          Visibility(
            visible: visible,
              child: Container(
            margin: EdgeInsets.all(17),
            child: CircularProgressIndicator(),
          )),
          TextField(
            decoration: InputDecoration(
              labelText: 'Required Value',
            ),
          ),
        ],
      )
    ),
    ),
    );
  }

/*
  String resistorText (){
    double x = resistor1Value + resistor2Value; //resistors
    return x.toString();
  }
*/

}
class ResistorCalc extends StatefulWidget{
  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    return ResistorCalcState();
  }
}
class ResistorCalcState extends State<ResistorCalc>{
  final _ResistorFormKey2 = GlobalKey<FormState>();

  Color ColorBand1 = Colors.yellow;
  Color ColorBand2 = Colors.orange;
  //colorbands
  String cb1dropdownValue = 'Red';
  String cb2dropdownValue = 'Red';
  String cb3dropdownValue = 'Red';
  String cb4dropdownValue = 'Red';
  String cb5dropdownValue = 'Red';
  String cb6dropdownValue = 'Red';
  String cb7dropdownValue = 'Red';

  double ResistorCBValue = 1;
  double? ToleranceCBValue = 1;
//  final ResistorCBValue =
  Future calcResistor() async {
    //digits in value
    ColorBand x;
    String cb1;
    String cb2;
    String cb3;
    String cb4;
    String cb5;
    String cb6;
    String cb7;

    ColorBand? ColorToValue(String value){
      if(value == 'Black') {
        return ColorBand(0, 1, null);
      } else if(value == 'Brown') {
        return ColorBand(1, 10, 1);
      } else if(value == 'Red') {
        return ColorBand(2, 100, 2);
      }else if(value == 'Orange') {
        return ColorBand(3, 1000, null);
      }else if(value == 'Yellow') {
        return ColorBand(4, 10000, null);
      }else if(value == 'Green') {
        return ColorBand(5, 100000, 0.5);
      }else if(value == 'Blue') {
        return ColorBand(6, 1000000, 0.25);
      } else if(value == 'Violet'){
        return ColorBand(7, null, 0.1);
      }else if(value == 'Grey'){
        return ColorBand(8, null, null);
      }else if(value == 'White'){
        return ColorBand(9, null, null);
      }else if(value == 'Gold'){
        return ColorBand(null, 0.1, 5);
      }else if(value == 'Silver'){
        return ColorBand(null, 0.01, 10);
      } else if(value == 'absent'){
        return null;
      }
    }
    ResistorCBValue = ((ColorToValue(cb1dropdownValue.toString())!.Digit! + ColorToValue(cb2dropdownValue.toString())!.Digit! + ColorToValue(cb3dropdownValue.toString())!.Digit!) * ColorToValue(cb4dropdownValue.toString())!.multiplier!); // + ;
    //in case of 4 bands the 4th band is used as tolerance
    ToleranceCBValue = (cb5dropdownValue.toString() != 'absent') ? ColorToValue(cb5dropdownValue.toString())!.tolerance : ColorToValue(cb4dropdownValue.toString())!.tolerance;
//      } else return null;
  //  }
  }
  @override
  Widget build(BuildContext context){

    return Scaffold(
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Padding(padding: EdgeInsets.symmetric(vertical: 17)),
          Padding(padding: EdgeInsets.symmetric(vertical: 2, horizontal: 3), child: Image.asset('resistor.1.2.png' ,width: 170, height: 70),),
          Form(
              child: Column(
            children: <Widget>[
              /*
              todo add a dropdown for number of cb then create the dropdowns accordingly
               for(i<noOfBands){
                 create new dropdown with cb$index as value
               }
               */
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Text('Color Band 1 : '),
                  DropdownButton<String>(
                      value: cb1dropdownValue,
                      icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                      iconSize: 17,
                      elevation: 17,
                      style: const TextStyle(color: Colors.black),

                  onChanged: (String? newValue){
                    setState((){
                      cb1dropdownValue = newValue!;
                    });
                  },
                  items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet']
                  .map<DropdownMenuItem<String>>((String value){
                    return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                    );
                  })
                  .toList(),
                  ),
                ],
              ),

              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(child: Text('Color Band 2 : ')),
                  DropdownButton<String>(
                    value: cb2dropdownValue,
                    icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                    iconSize: 17,
                    elevation: 17,
                    style: const TextStyle(color: Colors.black),

                    onChanged: (String? newValue){
                      setState((){
                        cb2dropdownValue = newValue!;
                      });
                    },
                    items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet']
                        .map<DropdownMenuItem<String>>((String value){
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),

                  ),
                ],
              ),

              //3
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(child: const Text('Color Band 3 : ')),
                  DropdownButton<String>(
                    value: cb3dropdownValue,
                    icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                    iconSize: 17,
                    elevation: 17,
                    style: const TextStyle(color: Colors.black),

                    onChanged: (String? newValue){
                      setState((){
                        cb3dropdownValue = newValue!;
                      });
                    },
                    items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet']
                        .map<DropdownMenuItem<String>>((String value){
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                  ),
                ],
              ),

              //4
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(child: const Text('Color Band 4 : ')),
                  DropdownButton<String>(
                    value: cb4dropdownValue,
                    icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                    iconSize: 17,
                    elevation: 17,
                    style: const TextStyle(color: Colors.black),

                    onChanged: (String? newValue){
                      setState((){
                        cb4dropdownValue = newValue!;
                      });
                    },
                    items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet']
                        .map<DropdownMenuItem<String>>((String value){
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),

                  ),
                ],
              ),

              //5
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(child: const Text('Color Band 5 : ')),
                  DropdownButton<String>(
                    value: cb5dropdownValue,
                    icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                    iconSize: 17,
                    elevation: 17,
                    style: const TextStyle(color: Colors.black),

                    onChanged: (String? newValue){
                      setState((){
                        cb5dropdownValue = newValue!;
                      });
                    },
                    items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet', 'Absent']
                        .map<DropdownMenuItem<String>>((String value){
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),

                  ),
                ],
              ),

              //6
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(child: const Text('Color Band 6 : ')),
                  DropdownButton<String>(
                    value: cb6dropdownValue,
                    icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                    iconSize: 17,
                    elevation: 17,
                    style: const TextStyle(color: Colors.black),

                    onChanged: (String? newValue){
                      setState((){
                        cb6dropdownValue = newValue!;
                      });
                    },
                    items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet', 'Absent']
                        .map<DropdownMenuItem<String>>((String value){
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),

                  ),
                ],
              ),

              //7
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(child: const Text('Color Band 7 : ')),
                  DropdownButton<String>(
                    value: cb7dropdownValue,
                    icon: const Icon(Icons.arrow_drop_down_circle_outlined),
                    iconSize: 17,
                    elevation: 17,
                    style: const TextStyle(color: Colors.black),

                    onChanged: (String? newValue){
                      setState((){
                        cb7dropdownValue = newValue!;
                      });
                    },
                    items: <String>['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Violet', 'Absent']
                        .map<DropdownMenuItem<String>>((String value){
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),

                  ),
                ],
              ),

              ElevatedButton(
                  onPressed: (){
                    calcResistor();
                    showDialog(context: context, builder: (BuildContext context){
                      return AlertDialog(
                        title: Text('Resistance: ' + ResistorCBValue.toString() +'\n Tolerance:' + ToleranceCBValue.toString()),
                        actions: <Widget>[
                          ElevatedButton(onPressed: (){ Navigator.of(context).pop(); }, child: const Text('OK')),
                        ],
                      );
                    });
                }, child: const Text("calculate")),
            ],
          )),
        ],
      ),
    );
  }
}
class VoltageDividerState extends State<VoltageDivider>{
  final _ResistorFormKey = GlobalKey<FormState>();

  double Resistor1 = 0;
  double Resistor2 = 0;
  @override
  Widget build(BuildContext context) {
    //thanks to javatpoint.com for label
    //get child =>
    return Form(child: Column(
      children: <Widget>[
        TextFormField(
          decoration: const InputDecoration(
            labelText: 'Resistor 1',
          ),
          onFieldSubmitted: (String? value){
            Resistor1 = value as double;
          },
        ),
        TextFormField(
          decoration: const InputDecoration(
            labelText: 'Resistor 2',
          ),
        onFieldSubmitted: (String? value){
            Resistor2 = value as double;
    },
//    TextInputType: TextInputType.number,
        ),
        ElevatedButton(
            onPressed: () {
              CalculateResistorValue();
              },
            child: Text('Calculate')
        ),
      ],
    ));
  }

  void CalculateResistorValue() {
    //field1+field2
  }
}
class ReadingNav extends Scaffold{

}